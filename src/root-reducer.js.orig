import { combineReducers } from 'redux'

<<<<<<< HEAD
function videos(state = { videos: []}, action) 
  {
  switch (action.type)
    {
      case 'FETCH_VIDEOS':
        return Object.assign({}, state, {videos: action.payload})
      case 'RECEIVE_VIDEOS':
        var videos = action.payload.map((vid)=>{
        return {id: vid.id.videoId, thumb: vid.snippet.thumbnails.default.url, title: vid.snippet.title, primary: false} })
        videos[0].primary = true
        return Object.assign({}, state, {videos: videos})
      case 'NEW_PRIMARY':
        var new_state = state.videos.filter(thing=>{return thing.id !== action.payload }).map(thing=>{ return {id: thing.id, thumb: thing.thumb, title: thing.title, primary: false}  })
        var new_primary = state.videos.filter(thing=>{return thing.id === action.payload }).map(thing=>{ return {id: thing.id, thumb: thing.thumb, title: thing.title, primary: true}  })
        return Object.assign({}, state, {videos: [...new_state, ...new_primary]})
      default:
       return state
    }
  } 

const rootReducer = combineReducers({videos})
=======
function reducer(state = {videos: [], primaryVidId: "REu2BcnlD34"}, action){
  switch (action.type) {
    case "FETCH_VIDEOS":
	    let videos = action.payload.data.items.map((item)=>{
	    	return {id: item.id.videoId, thumbNail: item.snippet.thumbnails.default.url}
	    })
	    return Object.assign({}, state, {videos: videos, primaryVidId: videos[0].id})
	case 'UPDATE_PRIMARY':
		return Object.assign({}, state, {videos: state.videos, primaryVidId: action.payload})
    default:
      return state
  }
}


// const rootReducer = combineReducers({reducer})
>>>>>>> 5f34e94742c549cd30b8c4f076b2a69e5a2e8368

// export default rootReducer
export default reducer
